{
    "test": {
      "prefix": "test",
      "body": [
        "int T;",
        "cin>>T;",
        "while(T--){",
        "    ${1}",
        "}"
      ],
      "description": "test"
    },
    "ttest": {
      "prefix": "ttest",
      "body": [
        "int T;",
        "cin>>T;",
        "for(int _ = 1; _<=T; _++){",
        "    ${1}",
        "}    ",
        "",
        "",
        "  "
      ],
      "description": "ttest"
    },
    "binpow": {
      "prefix": "binpow",
      "body": [
        "ll binpow(ll x, ll y ){",
        "    ll res = 1;",
        "    while(y){",
        "        if(y & 1) res = res * x % MOD;",
        "        x = x * x % MOD;",
        "        y>>=1;",
        "    }",
        "    return res;",
        "}",
        ""
      ],
      "description": "binpow"
    },
    "cpp template": {
      "prefix": "comp",
      "body": [
        "#include\"bits/stdc++.h\"",
        "#include <ext/pb_ds/assoc_container.hpp>",
        "#include <ext/pb_ds/tree_policy.hpp> ",
        "#include <ext/pb_ds/detail/standard_policies.hpp>",
        "using namespace __gnu_pbds;",
        "using namespace std;",
        "",
        "typedef long long ll;",
        "#define FIO                ios::sync_with_stdio(false),cin.tie(0)",
        "#define rep(i,a,b)         for(int i=a;i<b;i++)",
        "#define repe(i,a,b)        for(int i=a;i<=b;i++)",
        "#define rrep(i,a,b)        for(int i=b;i>=a;i--)",
        "#define trav(it,E)         for(auto it : E)cout<<it<<' ';cout<<endl",
        "#define takeinp(it,E)      for(auto& it: E)cin>>it",
        "#define PI                 acos(-1.0)",
        "#define all(a)             a.begin(),a.end()",
        "#define rall(a)            a.rbegin(),a.rend()",
        "#define Unique(a)          sort(all(a)),a.erase(unique(all(a)),a.end())",
        "",
        "#define sz(s)              (int)s.size()",
        "#define vi                 vector<int>",
        "#define vl                 vector<ll>",
        "#define vc                 vector<char>",
        "#define pii                pair<int,int>",
        "#define pl                 pair<ll,ll>",
        "#define vpi                vector<pii>",
        "#define vpl                vector<pl>",
        "",
        "#define F                  first",
        "#define S                  second",
        "#define lb                 lower_bound",
        "#define ub                 upper_bound ",
        "#define pb                 push_back ",
        "#define ppb                pop_back ",
        "#define pf                 push_front ",
        "#define ppf                pop_front ",
        "#define ins(a)             insert(a)",
        "",
        "#define max2(a,b)          max(a,b)",
        "#define max3(a,b,c)        max(a,max(b,c))",
        "#define max4(a,b,c,d)      max(a,max3(b,c,d))",
        "#define min2(a,b)          min(a,b)",
        "#define min3(a,b,c)        min(a,min(b,c))",
        "#define min4(a,b,c,d)      min(a,min3(b,c,d))",
        "#define endl              '\\n'",
        "",
        "#define inf                2000000000",
        "#define INF                3000000000000000000",
        "",
        "typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;",
        "void __print(int x) {cerr << x;}",
        "void __print(long x) {cerr << x;}",
        "void __print(long long x) {cerr << x;}",
        "void __print(unsigned x) {cerr << x;}",
        "void __print(unsigned long x) {cerr << x;}",
        "void __print(unsigned long long x) {cerr << x;}",
        "void __print(float x) {cerr << x;}",
        "void __print(double x) {cerr << x;}",
        "void __print(long double x) {cerr << x;}",
        "void __print(char x) {cerr << '\\'' << x << '\\'';}",
        "void __print(const char *x) {cerr << '\\\"' << x << '\\\"';}",
        "void __print(const string &x) {cerr << '\\\"' << x << '\\\"';}",
        "void __print(bool x) {cerr << (x ? \"true\" : \"false\");}",
        " ",
        "template<typename T, typename V>",
        "void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}",
        "template<typename T>",
        "void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}",
        "void _print() {cerr << \"]\\n\";}",
        "template <typename T, typename... V>",
        "void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}",
        "#ifndef ONLINE_JUDGE",
        "#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)",
        "#else",
        "#define debug(x...)",
        "#endif  ",
        "",
        "",
        " ",
        "int main()",
        "{",
        "    FIO;",
        "    #ifndef ONLINE_JUDGE",
        "    //freopen(\"input.txt\",\"r\",stdin);",
        "    //freopen(\"output.txt\",\"w\",stdout);",
        "    #endif",
        "    ",
        "    ${1}",
        "    ",
        "    ",
        "    ",
        "    ",
        "    #ifdef ONLINE_JUDGE",
        "    cerr<<\"Time elapsed: \"<<1.0*clock()/CLOCKS_PER_SEC<<\"s.\\n\";",
        "    #endif",
        "   ",
        "    return 0;",
        "    ",
        "      ",
        "}",
        ""
      ],
      "description": "cpp template"
    },
    "dsu": {
      "prefix": "dsu",
      "body": [
        "vector<int>Parent;",
        "vector<int>Rank;",
        "",
        "void makeset(){",
        "    for(int i = 1; i<=n; i++){",
        "        Parent[i] = i;",
        "        Rank[i] = 1;",
        "    }",
        "}",
        "",
        "int findParent(int x ){",
        "    return Parent[x] =(Parent[x]==x ? x : findParent(Parent[x]));",
        "}",
        "",
        "void Union(int x, int y ){",
        "    x = findParent(x);",
        "    y = findParent(y);",
        "    ",
        "    if(x == y ) return;",
        "    if(Rank[x] < Rank[y]) swap(x, y);",
        "    Parent[y] = x;",
        "    Rank[x] += Rank[y];",
        "    ",
        "}",
        " "
      ],
      "description": "dsu"
    },
    "extended_euclidean": {
      "prefix": "extended_euclidean",
      "body": [
        "int extended_euclidean(int a, int b, int &x, int &y){",
        "    if(b == 0 ){",
        "        x = 1;",
        "        y = 0;",
        "        return a;",
        "    }",
        "",
        "    int x1, y1;",
        "    int d = extended_euclidean(b, a % b, x1, y1);",
        "    x = y1;",
        "    y = x1 - y1 * ( a/ b );",
        "    return d;",
        "}"
      ],
      "description": "extended_euclidean"
    },
    "gcd": {
      "prefix": "gcd",
      "body": [
        "int gcd(int a, int b){",
        "    while(b){",
        "        a = a % b;",
        "        swap(a, b );",
        "    }",
        "    return a;",
        "}"
      ],
      "description": "gcd"
    },
    "phi": {
      "prefix": "phi",
      "body": [
        "int phi(int n ){",
        "    int result = n;",
        "    for(int i = 2; i * i <=n; i++){",
        "        if(n % i == 0 ){",
        "            while(n % i ==0) n/=i;",
        "            result -= result/i;",
        "        }",
        "    }",
        "    if(n > 1) result -= result / n;",
        "    return result;",
        "}"
      ],
      "description": "phi"
    },
    "phi_1_to_n": {
      "prefix": "phi_1_to_n",
      "body": [
        "vector<int>phi;",
        "void phi_1_to_n(int n) {",
        "    phi.resize(n + 1);",
        "    phi[0] = 0;",
        "    phi[1] = 1;",
        "    for (int i = 2; i <= n; i++)",
        "        phi[i] = i;",
        "",
        "    for (int i = 2; i <= n; i++) {",
        "        if (phi[i] == i) {",
        "            for (int j = i; j <= n; j += i)",
        "                phi[j] -= phi[j] / i;",
        "            ",
        "        }",
        "    }",
        "}"
      ],
      "description": "phi_1_to_n"
    },
    "sieve": {
      "prefix": "sieve",
      "body": [
        "const int maxn = 90000003;",
        "",
        "bool isprime[maxn];",
        "vector<int>primes;",
        "",
        "void sieve(){",
        "    isprime[0] = isprime[1] = true;",
        "    for(int i = 2; i * i <maxn; i++){",
        "        if(isprime[i] == false){",
        "            for(int j = i * i ; j<maxn; j += i){",
        "                isprime[j] = true;",
        "            }",
        "        }",
        "    }",
        "",
        "    for(int i = 0; i<maxn; i++){",
        "        if(isprime[i] == false) primes.pb(i);",
        "    }",
        "}"
      ],
      "description": "sieve"
    }
}
